#!/usr/bin/env bash
# shellcheck source=/dev/null disable=SC2155

# Skip customizations if not running interactively
[[ "${-}" != *i* ]] && return

# Shell options
set -o vi
stty -ixon
shopt -s histappend cdspell checkwinsize checkjobs cmdhist globstar mailwarn no_empty_cmd_completion

# Manpage Pager
command -v batcat &>/dev/null && export MANPAGER="sh -c 'col -bx | batcat --language man --plain'"

# Make LESS more friendly for non-text input files
[[ -x "/usr/bin/lesspipe" ]] && eval "$(SHELL="/bin/sh" lesspipe)"

# Starship Prompt
if command -v starship &>/dev/null; then
    eval "$(starship init bash)"
fi

# Forward ssh-agent requests to windows; use keychain; or warn user
if (command -v socat && command -v npiperelay.exe) &>/dev/null; then
    export SSH_AUTH_SOCK="${HOME}/.ssh/agent.sock"
    if ! pgrep --full 'npiperelay\.exe.*openssh-ssh-agent' &>/dev/null; then
        [[ -S "${SSH_AUTH_SOCK}" ]] && rm --force "${SSH_AUTH_SOCK}"
        listen="UNIX-LISTEN:${SSH_AUTH_SOCK},fork"
        relay="EXEC:'npiperelay.exe -ei -s //./pipe/openssh-ssh-agent',nofork"
        (setsid socat "${listen}" "${relay}" & disown) &>/dev/null
        unset listen relay
    fi
elif command -v keychain &>/dev/null; then
    export SSH_HOME="${HOME}/.ssh/${HOSTNAME}"
    eval "$(keychain --eval --agents 'ssh' \
        "${SSH_HOME}/id_rsa" \
        "${SSH_HOME}/github/id_rsa" \
        "${SSH_HOME}/gitlab/id_rsa" \
    )"
else
    printf '%s\n' "Failed to configure ssh-agent" >&2
fi

# Start wsl-vpnkit for DNS & Networking support with VPNs...
# https://github.com/sakai135/wsl-vpnkit
if wsl.exe --list | grep --quiet 'wsl-vpnkit'; then
    wsl.exe -d wsl-vpnkit service wsl-vpnkit start
fi

# PATH
PATH+=":${HOME}/.cargo/bin"
PATH+=":${HOME}/.local/bin"
export PATH

# XDG
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_STATE_HOME="${XDG_DATA_HOME%/*}/state"

# SSH
export SSH_HOME="${HOME}/.ssh/${HOSTNAME}"
export SSH_AUTH_SOCK="${SSH_HOME%/*}"

# History
export HISTSIZE=""
export HISTFILESIZE=""
export HISTCONTROL="ignoreboth,erasedups"
export HISTIGNORE=$'[\t]*:&:[fb]g:exit'

# Environment
export EDITOR="$(command -v nvim)"
export FILE_MANAGER="$(command -v explorer.exe)"
export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
export TERM="${TERM:-xterm-256color}"
export COLORTERM="truecolor"

# LESS colors
export LESS="--RAW-CONTROL-CHARS --ignore-case"
export LESS_TERMCAP_mb="$(tput blink)"
export LESS_TERMCAP_md="$(tput bold)"
export LESS_TERMCAP_me="$(tput sgr0)"
export LESS_TERMCAP_so="$(tput smso)"
export LESS_TERMCAP_se="$(tput rmso)"
export LESS_TERMCAP_us="$(tput smul)"
export LESS_TERMCAP_ue="$(tput rmul)"

# urlscanio
[[ -n "${URLSCAN_DATA_DIR}" ]] && mkdir --parents "${URLSCAN_DATA_DIR}"

# Include published configurations
source "${XDG_CONFIG_HOME}/bash/aliases"
source "${XDG_CONFIG_HOME}/bash/functions"

# clear $?
true
